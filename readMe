Задание 12

Провести аудит безопасности простого приложения MEAN Stack.

1.	Найти и устранить уязвимости NoSQL инъекции в MongoDB.
1)	Проверить все запросы к MongoDB на наличие возможности инъекций.
2)	Использовать параметризованные запросы или ORM, чтобы       предотвратить инъекции.

NOSQL INJECTION
	const userInput = req.body.username;
db.collection('users').findOne({ username: userInput }, (err, user) => {
  	if (err) {
   	 // handle error
 	 }
  	res.json(user);
});



2.	Реализовать защиту от XSS и CSRF в приложении.
1)	Для защиты от XSS использовать Angular Security API, такие как Sanitizer для очистки пользовательского ввода перед выводом на страницу.
2)	Для защиты от CSRF генерировать и использовать уникальные токены CSRF для каждого запроса и проверять их при получении запроса на сервере.

XSS CSRF
sanitizeInput(input: string): string {
  return this.sanitizer.sanitize(SecurityContext.HTML, input);
}
<form action="/submit" method="post">
  <input type="hidden" name="_csrf" value="{{ csrfToken }}">
  <!-- Other form fields -->
  <button type="submit">Submit</button>
</form>


3.	Настроить безопасные HTTP заголовки и включить HTTPS.
1) Включить HTTPS, используя SSL сертификат, чтобы обеспечить безопасную передачу данных между клиентом и сервером.

HTTPS
const https = require('https');
const fs = require('fs');
const options = {
  key: fs.readFileSync('path/to/private.key'),
  cert: fs.readFileSync('path/to/certificate.crt')
};
https.createServer(options, app).listen(443);



Вопрос 1: Опишите, как можно минимизировать риски XSS атак в Angular приложениях.

	1) Использование Angular интерполяции ({{}}) вместо непосредственного внедрения HTML для вывода данных на странице.
2)Использование Content Security Policy (CSP) для ограничения источников загружаемых ресурсов и скриптов.
3)Проведение регулярного код-ревью.

Вопрос 2: Какие меры следует предпринять для защиты от NoSQL инъекций в MongoDB?

	1) Использовать параметризованные запросы или ORM (Object-Relational Mapping) вместо конкатенации строк для формирования запросов к базе данных.
2)Проверять и фильтровать пользовательский ввод, чтобы предотвратить внедрение вредоносного кода.
3)Ограничивать права доступа к базе данных, чтобы ограничить возможность выполнения опасных операций.

Вопрос 3: Что такое CSRF, и как можно защитить приложение от такого рода атак?

	1) Использовать токены CSRF: при каждом запросе генерировать уникальный токен CSRF, который включается в форму или в заголовок запроса, и проверять его на сервере при получении запроса.
2)Ограничение методов запросов: разрешать только безопасные HTTP методы, такие как GET, POST, HEAD, OPTIONS, и запрещать использование опасных методов, таких как DELETE, PUT, PATCH в запросах, которые могут изменять состояние сервера.



Задание: Исследовать текущие угрозы безопасности веб-приложений.
Цель: Составить доклад о самых актуальных угрозах безопасности веб-приложений, опираясь на последний отчет OWASP Top 10.

Анализ:

Инъекции (Injection): Уязвимости инъекций могут привести к исполнению вредоносного кода на сервере, что может привести к утечке данных или нарушению целостности приложения.
Недостаточная авторизация (Broken Authentication): Недостаточная авторизация может привести к несанкционированному доступу к конфиденциальным данным или выполнению привилегированных операций злоумышленниками.
Выявление конфиденциальной информации (Sensitive Data Exposure): Эта угроза связана с неправильной обработкой конфиденциальной информации, что может привести к её утечке и последующему использованию злоумышленниками.

Методы защиты для MEAN Stack:

Инъекции (Injection): Использование параметризованных запросов и валидация входных данных, а также использование ORM для предотвращения возможности инъекций.
Недостаточная авторизация (Broken Authentication): Реализация правильной аутентификации и авторизации, использование сильных и уникальных паролей, внедрение двухфакторной аутентификации и ограничение доступа к конфиденциальным данным.
Выявление конфиденциальной информации (Sensitive Data Exposure): Шифрование конфиденциальных данных в покое и в движении, ограничение доступа к конфиденциальным данным только необходимым пользователям, регулярное обновление безопасности и мониторинг атак на конфиденциальные данные.



